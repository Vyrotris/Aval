const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getColor } = require('../../misc/colorUtil');

const flipTable = {
  'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•',
  'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': ' É', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd',
  'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x',
  'y': ' é', 'z': 'z',
  'A': '‚àÄ', 'B': 'êêí', 'C': '∆Ü', 'D': '‚óñ', 'E': '∆é', 'F': '‚Ñ≤', 'G': '◊§', 'H': 'H',
  'I': 'I', 'J': '≈ø', 'K': ' û', 'L': '‚ÖÇ', 'M': 'W', 'N': 'N', 'O': 'O', 'P': '‘Ä',
  'Q': 'Q', 'R': '…π', 'S': 'S', 'T': '‚ä•', 'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X',
  'Y': '‚ÖÑ', 'Z': 'Z',
  '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê', '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•',
  '8': '8', '9': '6',
  '.': 'Àô', ',': "'", "'": ',', '"': ',,', '`': ',', '?': '¬ø', '!': '¬°',
  '[': ']', ']': '[', '(': ')', ')': '(', '{': '}', '}': '{', '<': '>', '>': '<',
  '&': '‚Öã', '_': '‚Äæ', '^': 'v', '%': 'ÔºÖ', '#': 'ÔºÉ', '*': '‚àó', '+': '+', '=': '=',
  '-': '-', ':': ':', ';': 'ÿõ', ' ': ' '
};

function flipText(text) {
  return text
    .split('')
    .map(c => flipTable[c] || flipTable[c.toLowerCase()] || c)
    .reverse()
    .join('');
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('flip')
    .setDescription('Flip your text upside down')
    .addStringOption(option =>
      option.setName('text')
        .setDescription('The text to flip')
        .setRequired(true))
    .setIntegrationTypes([1])
    .setContexts([0, 1, 2]),

  async run(interaction) {
    const inputText = interaction.options.getString('text');

    if (inputText.length > 50) {
      return interaction.reply({ content: 'Text is too long. Please use 50 characters or less.', ephemeral: true });
    }

    const flipped = flipText(inputText);

    const embed = new EmbedBuilder()
      .setTitle('Flipped Text')
      .setDescription(flipped)
      .setColor(getColor('primary'))
      .setFooter({ text: `Requested by ${interaction.user.username}` })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }
};